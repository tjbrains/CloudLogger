// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: http_access_log_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HttpAccessLogService_CreateHttpAccessLogs_FullMethodName = "/logger.HttpAccessLogService/createHttpAccessLogs"
)

// HttpAccessLogServiceClient is the client API for HttpAccessLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpAccessLogServiceClient interface {
	CreateHttpAccessLogs(ctx context.Context, in *CreateHttpAccessLogsRequest, opts ...grpc.CallOption) (*CreateHttpAccessLogsResponse, error)
}

type httpAccessLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpAccessLogServiceClient(cc grpc.ClientConnInterface) HttpAccessLogServiceClient {
	return &httpAccessLogServiceClient{cc}
}

func (c *httpAccessLogServiceClient) CreateHttpAccessLogs(ctx context.Context, in *CreateHttpAccessLogsRequest, opts ...grpc.CallOption) (*CreateHttpAccessLogsResponse, error) {
	out := new(CreateHttpAccessLogsResponse)
	err := c.cc.Invoke(ctx, HttpAccessLogService_CreateHttpAccessLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpAccessLogServiceServer is the server API for HttpAccessLogService service.
// All implementations should embed UnimplementedHttpAccessLogServiceServer
// for forward compatibility
type HttpAccessLogServiceServer interface {
	CreateHttpAccessLogs(context.Context, *CreateHttpAccessLogsRequest) (*CreateHttpAccessLogsResponse, error)
}

// UnimplementedHttpAccessLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHttpAccessLogServiceServer struct {
}

func (UnimplementedHttpAccessLogServiceServer) CreateHttpAccessLogs(context.Context, *CreateHttpAccessLogsRequest) (*CreateHttpAccessLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHttpAccessLogs not implemented")
}

// UnsafeHttpAccessLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpAccessLogServiceServer will
// result in compilation errors.
type UnsafeHttpAccessLogServiceServer interface {
	mustEmbedUnimplementedHttpAccessLogServiceServer()
}

func RegisterHttpAccessLogServiceServer(s grpc.ServiceRegistrar, srv HttpAccessLogServiceServer) {
	s.RegisterService(&HttpAccessLogService_ServiceDesc, srv)
}

func _HttpAccessLogService_CreateHttpAccessLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHttpAccessLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpAccessLogServiceServer).CreateHttpAccessLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpAccessLogService_CreateHttpAccessLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpAccessLogServiceServer).CreateHttpAccessLogs(ctx, req.(*CreateHttpAccessLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpAccessLogService_ServiceDesc is the grpc.ServiceDesc for HttpAccessLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpAccessLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.HttpAccessLogService",
	HandlerType: (*HttpAccessLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createHttpAccessLogs",
			Handler:    _HttpAccessLogService_CreateHttpAccessLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http_access_log_service.proto",
}
